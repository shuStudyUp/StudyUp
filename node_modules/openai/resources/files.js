"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", { value: true });
exports.Files = void 0;
const resource_1 = require("../core/resource.js");
const pagination_1 = require("../core/pagination.js");
const headers_1 = require("../internal/headers.js");
const sleep_1 = require("../internal/utils/sleep.js");
const error_1 = require("../error.js");
const uploads_1 = require("../internal/uploads.js");
const path_1 = require("../internal/utils/path.js");
=======
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileObjectsPage = exports.Files = void 0;
const resource_1 = require("../resource.js");
const core_1 = require("../core.js");
const core_2 = require("../core.js");
const error_1 = require("../error.js");
const Core = __importStar(require("../core.js"));
const pagination_1 = require("../pagination.js");
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
class Files extends resource_1.APIResource {
    /**
     * Upload a file that can be used across various endpoints. Individual files can be
     * up to 512 MB, and the size of all files uploaded by one organization can be up
     * to 100 GB.
     *
     * The Assistants API supports files up to 2 million tokens and of specific file
     * types. See the
     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for
     * details.
     *
     * The Fine-tuning API only supports `.jsonl` files. The input also has certain
     * required formats for fine-tuning
     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or
     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)
     * models.
     *
     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also
     * has a specific required
     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).
     *
     * Please [contact us](https://help.openai.com/) if you need to increase these
     * storage limits.
     */
    create(body, options) {
<<<<<<< HEAD
        return this._client.post('/files', (0, uploads_1.multipartFormRequestOptions)({ body, ...options }, this._client));
=======
        return this._client.post('/files', Core.multipartFormRequestOptions({ body, ...options }));
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
    }
    /**
     * Returns information about a specific file.
     */
<<<<<<< HEAD
    retrieve(fileID, options) {
        return this._client.get((0, path_1.path) `/files/${fileID}`, options);
    }
    /**
     * Returns a list of files.
     */
    list(query = {}, options) {
        return this._client.getAPIList('/files', (pagination_1.CursorPage), { query, ...options });
=======
    retrieve(fileId, options) {
        return this._client.get(`/files/${fileId}`, options);
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
    }
    /**
     * Delete a file.
     */
<<<<<<< HEAD
    delete(fileID, options) {
        return this._client.delete((0, path_1.path) `/files/${fileID}`, options);
=======
    del(fileId, options) {
        return this._client.delete(`/files/${fileId}`, options);
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
    }
    /**
     * Returns the contents of the specified file.
     */
<<<<<<< HEAD
    content(fileID, options) {
        return this._client.get((0, path_1.path) `/files/${fileID}/content`, {
            ...options,
            headers: (0, headers_1.buildHeaders)([{ Accept: 'application/binary' }, options?.headers]),
=======
    content(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, {
            ...options,
            headers: { Accept: 'application/binary', ...options?.headers },
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
            __binaryResponse: true,
        });
    }
    /**
<<<<<<< HEAD
=======
     * Returns the contents of the specified file.
     *
     * @deprecated The `.content()` method should be used instead
     */
    retrieveContent(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, options);
    }
    /**
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
     * Waits for the given file to be processed, default timeout is 30 mins.
     */
    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {
        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);
        const start = Date.now();
        let file = await this.retrieve(id);
        while (!file.status || !TERMINAL_STATES.has(file.status)) {
<<<<<<< HEAD
            await (0, sleep_1.sleep)(pollInterval);
=======
            await (0, core_2.sleep)(pollInterval);
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
            file = await this.retrieve(id);
            if (Date.now() - start > maxWait) {
                throw new error_1.APIConnectionTimeoutError({
                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,
                });
            }
        }
        return file;
    }
}
exports.Files = Files;
<<<<<<< HEAD
=======
class FileObjectsPage extends pagination_1.CursorPage {
}
exports.FileObjectsPage = FileObjectsPage;
Files.FileObjectsPage = FileObjectsPage;
>>>>>>> c797906be0d504d2f370ed54ed73bcac6be5ad85
//# sourceMappingURL=files.js.map